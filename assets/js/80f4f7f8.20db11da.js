"use strict";(self.webpackChunkutopia_os_github_io=self.webpackChunkutopia_os_github_io||[]).push([[9849],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(r),f=n,b=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return r?a.createElement(b,o(o({ref:t},l),{},{components:r})):a.createElement(b,o({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1101:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:2},o="p2p Database",p={unversionedId:"docs/utopia-p2p/p2p-database",id:"docs/utopia-p2p/p2p-database",title:"p2p Database",description:"* gunDB is a decentralized database",source:"@site/docs/docs/utopia-p2p/p2p-database.md",sourceDirName:"docs/utopia-p2p",slug:"/docs/utopia-p2p/p2p-database",permalink:"/docs/utopia-p2p/p2p-database",draft:!1,editUrl:"https://github.com/utopia-os/utopia-os.github.io/tree/main/docs/docs/utopia-p2p/p2p-database.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Serverless Hosting",permalink:"/docs/utopia-p2p/serverless-hosting"},next:{title:"Public Privat Key IDs",permalink:"/docs/utopia-p2p/public-privat-key"}},s={},c=[],l={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"p2p-database"},"p2p Database"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gun.eco/"},"gunDB")," is a decentralized database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://ipfs.io"},"IPFS - Inter-Planetary File System")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.ipld.io"},"IPLD - Inter-Planetary Linked Data")," is an Ecosystem of formats and data: JSON linked by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/multiformats/cid"},"CIDs")," with support for binary data"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://orbitdb.org/"},"OrbitDB")," is a serverless, distributed, peer-to-peer database hosted on ",(0,n.kt)("a",{parentName:"li",href:"https://ipfs.io"},"IPFS")," using ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type"},"CRDTs"))))}u.isMDXComponent=!0}}]);